/*!
 * obigo-js-ui v1.0.2 (https://)
 * Licensed under the GPL license
 */
module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: false
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.loaded = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.p = "";
    return __webpack_require__(0);
}([ function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(7);
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _longPress = __webpack_require__(4);
    var _longPress2 = _interopRequireDefault(_longPress);
    var _slider = __webpack_require__(8);
    var _slider2 = _interopRequireDefault(_slider);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    exports.default = {
        name: "obg-range",
        components: {
            "obg-slider": _slider2.default
        },
        props: {
            min: {
                type: Number,
                default: 0
            },
            max: {
                type: Number,
                default: 100
            },
            step: {
                type: Number,
                default: 1
            },
            disabled: {
                type: Boolean,
                default: false
            },
            value: {
                type: Number,
                default: 0
            },
            barHeight: {
                type: Number
            },
            sliderWidth: {
                tyep: Number
            },
            rangeWidth: {
                type: Number,
                default: 700
            },
            stepPercent: {
                type: Number,
                default: 1
            }
        },
        data: function data() {
            return {
                model: this.value < this.min ? this.min : this.value,
                focus: false,
                counter: 0,
                weight: 1
            };
        },
        mounted: function mounted() {
            var _this = this;
            var up = this.$refs.up;
            var down = this.$refs.down;
            this.onepercent = Math.ceil((this.max - this.min) / 100);
            (0, _longPress2.default)(up, {
                counter: function counter() {
                    _this.valueUp();
                },
                end: function end() {
                    _this.onInput(_this.model);
                    _this.reset();
                }
            });
            (0, _longPress2.default)(down, {
                counter: function counter() {
                    _this.valueDown();
                },
                end: function end() {
                    _this.onInput(_this.model);
                    _this.reset();
                }
            });
            this.$on("jogclick", function() {
                _this.focus = !_this.focus;
                if (_this.focus) {} else {}
            });
            this.$on("focusout", function() {
                _this.focus = false;
            });
        },
        methods: {
            valueDown: function valueDown() {
                this.model = this.model - this.onepercent * this.stepPercent;
                if (this.model < this.min) this.model = this.min;
                this.$emit("input", this.model);
            },
            valueUp: function valueUp() {
                this.model = this.model + this.onepercent * this.stepPercent;
                if (this.model > this.max) this.model = this.max;
                this.$emit("input", this.model);
            },
            onInput: function onInput(val) {
                this.$emit("input", val);
            },
            reset: function reset() {
                this.counter = 0;
                this.onepercent = Math.ceil((this.max - this.min) / 100);
                this.weight = 1;
            },
            addCount: function addCount() {
                this.counter++;
                if (this.counter % 8 === 0) {
                    if (this.weight < 12) {
                        this.weight += 4;
                    } else {
                        this.weight = 10;
                    }
                }
            }
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _draggable = __webpack_require__(3);
    var _draggable2 = _interopRequireDefault(_draggable);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    exports.default = {
        name: "obg-slider",
        props: {
            min: {
                type: Number,
                default: 0
            },
            max: {
                type: Number,
                default: 100
            },
            step: {
                type: Number,
                default: 1
            },
            disabled: {
                type: Boolean,
                default: false
            },
            value: {
                type: Number
            },
            barHeight: {
                type: Number,
                default: 5
            },
            draggable: {
                type: Boolean,
                default: true
            },
            focus: {
                type: Boolean,
                defalut: false
            },
            sliderWidth: {
                type: Number,
                default: 525
            },
            thumbLabel: {
                type: Boolean,
                default: false
            }
        },
        computed: {
            progress: function progress() {
                var value = this.value;
                if (typeof value === "undefined" || value === null || value === 0) return 0;
                if (this.value >= this.max) {
                    return 100;
                } else if (this.value <= this.min) {
                    return 0;
                }
                return Math.floor((value - this.min) / (this.max - this.min) * 100);
            }
        },
        watch: {
            focus: function focus(isFocus) {
                if (isFocus) {
                    this.$refs.thumb.classList.add("focus");
                } else {
                    this.$refs.thumb.classList.remove("focus");
                }
            }
        },
        mounted: function mounted() {
            var _this = this;
            var thumb = this.$refs.thumb;
            var content = this.$refs.content;
            this.stepCount = Math.ceil((this.max - this.min) / this.step);
            var getThumbPosition = function getThumbPosition() {
                var contentBox = content.getBoundingClientRect();
                var thumbBox = thumb.getBoundingClientRect();
                return {
                    left: thumbBox.left - contentBox.left,
                    top: thumbBox.top - contentBox.top
                };
            };
            if (this.draggable) {
                var dragState = {};
                (0, _draggable2.default)(thumb, {
                    start: function start() {
                        if (_this.disabled) return;
                        var position = getThumbPosition();
                        dragState = {
                            thumbStartLeft: position.left,
                            thumbStartTop: position.top
                        };
                    },
                    drag: function drag(event) {
                        if (_this.disabled) return;
                        var contentBox = content.getBoundingClientRect();
                        var deltaX = event.pageX - contentBox.left - dragState.thumbStartLeft;
                        var newPosition = dragState.thumbStartLeft + deltaX - (dragState.thumbStartLeft + deltaX) % (contentBox.width / _this.stepCount);
                        var newProgress = newPosition / contentBox.width;
                        if (newProgress < 0) {
                            newProgress = 0;
                        } else if (newProgress > 1) {
                            newProgress = 1;
                        }
                        _this.$emit("input", Math.round(_this.min + newProgress * (_this.max - _this.min)));
                    },
                    end: function end() {
                        if (_this.disabled) return;
                        _this.$emit("input", _this.value);
                        dragState = {};
                    }
                });
            }
        },
        methods: {
            onClickBar: function onClickBar(event) {
                if (this.draggable) {
                    var contentBox = this.$refs.content.getBoundingClientRect();
                    var deltaX = event.pageX - contentBox.left;
                    var newProgress = Math.floor(this.max * deltaX / contentBox.width);
                    if (newProgress < this.min) {
                        newProgress = this.min;
                    } else if (newProgress > this.max) {
                        newProgress = this.max;
                    }
                    this.$emit("input", newProgress);
                }
            }
        }
    };
}, function(module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = function(element, options) {
        var moveStart = function moveStart(event) {
            if (options.drag) {
                options.drag(event);
            }
        };
        var moveEnd = function moveEnd(event) {
            document.removeEventListener("mousemove", moveStart);
            document.removeEventListener("mouseup", moveEnd);
            document.onselectstart = null;
            document.ondragstart = null;
            isDragging = false;
            if (options.end) {
                options.end(event);
            }
        };
        element.addEventListener("mousedown", function(event) {
            if (isDragging) return;
            event.preventDefault();
            document.onselectstart = function() {
                return false;
            };
            document.ondragstart = function() {
                return false;
            };
            document.addEventListener("mousemove", moveStart);
            document.addEventListener("mouseup", moveEnd);
            isDragging = true;
            if (options.start) {
                options.start(event);
            }
        });
    };
    var isDragging = false;
}, function(module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = function(element, options) {
        var holdRelease = function holdRelease(event) {
            document.removeEventListener("mouseup", holdRelease);
            document.onselectstart = null;
            reset();
            clearTimeout(timer);
            if (options.end) {
                options.end(event);
            }
        };
        var startCounter = function startCounter() {
            timer = setTimeout(function() {
                options.counter(++counter);
                if (counter % 3 === 0) {
                    duration = duration / 2 > minDuration ? duration / 2 : minDuration;
                }
                startCounter();
            }, duration);
        };
        var reset = function reset() {
            isHolding = false;
            duration = 1e3;
            counter = 0;
        };
        element.addEventListener("mousedown", function(event) {
            if (isHolding) return;
            event.preventDefault();
            document.onselectstart = function() {
                return false;
            };
            document.addEventListener("mouseup", holdRelease);
            timer = setTimeout(function() {
                isHolding = true;
                clearTimeout(timer);
                if (options.start) {
                    options.start(event);
                }
                if (options.counter) {
                    startCounter();
                }
            }, longPressDuration);
        });
    };
    var isHolding = false;
    var longPressDuration = 500;
    var timer = null;
    var duration = 500;
    var minDuration = 100;
    var counter = 0;
}, function(module, exports) {}, function(module, exports) {}, function(module, exports, __webpack_require__) {
    var __vue_exports__, __vue_options__;
    var __vue_styles__ = {};
    __webpack_require__(6);
    __vue_exports__ = __webpack_require__(1);
    var __vue_template__ = __webpack_require__(10);
    __vue_options__ = __vue_exports__ = __vue_exports__ || {};
    if (typeof __vue_exports__.default === "object" || typeof __vue_exports__.default === "function") {
        __vue_options__ = __vue_exports__ = __vue_exports__.default;
    }
    if (typeof __vue_options__ === "function") {
        __vue_options__ = __vue_options__.options;
    }
    __vue_options__.render = __vue_template__.render;
    __vue_options__.staticRenderFns = __vue_template__.staticRenderFns;
    __vue_options__._scopeId = "data-v-a68636c2";
    module.exports = __vue_exports__;
}, function(module, exports, __webpack_require__) {
    var __vue_exports__, __vue_options__;
    var __vue_styles__ = {};
    __webpack_require__(5);
    __vue_exports__ = __webpack_require__(2);
    var __vue_template__ = __webpack_require__(9);
    __vue_options__ = __vue_exports__ = __vue_exports__ || {};
    if (typeof __vue_exports__.default === "object" || typeof __vue_exports__.default === "function") {
        __vue_options__ = __vue_exports__ = __vue_exports__.default;
    }
    if (typeof __vue_options__ === "function") {
        __vue_options__ = __vue_options__.options;
    }
    __vue_options__.render = __vue_template__.render;
    __vue_options__.staticRenderFns = __vue_template__.staticRenderFns;
    __vue_options__._scopeId = "data-v-9ff9d4ca";
    module.exports = __vue_exports__;
}, function(module, exports) {
    module.exports = {
        render: function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", {
                staticClass: "obg-slider",
                class: {
                    "obg-slider-disabled": _vm.disabled
                },
                style: {
                    width: _vm.sliderWidth + "px"
                }
            }, [ _vm._t("start"), _vm._v(" "), _c("div", {
                ref: "content",
                staticClass: "obg-slider-content",
                on: {
                    mousedown: function($event) {
                        $event.preventDefault();
                        _vm.onClickBar($event);
                    }
                }
            }, [ _c("div", {
                staticClass: "obg-slider-runway",
                style: {
                    "border-top-width": _vm.barHeight + "px"
                },
                on: {
                    click: _vm.onClickBar
                }
            }), _vm._v(" "), _c("div", {
                staticClass: "obg-slider-progress",
                style: {
                    width: _vm.progress + "%",
                    height: _vm.barHeight + "px"
                }
            }), _vm._v(" "), _c("div", {
                ref: "thumb",
                staticClass: "obg-slider-thumb animate-scale",
                style: {
                    left: _vm.progress + "%"
                }
            }, [ _vm.thumbLabel ? _c("span", {
                staticClass: "obg-slider-current-value"
            }, [ _vm._v(_vm._s(_vm.progress)) ]) : _vm._e() ]) ]), _vm._v(" "), _vm._t("end") ], 2);
        },
        staticRenderFns: []
    };
}, function(module, exports) {
    module.exports = {
        render: function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", {
                staticClass: "obg-range",
                class: {
                    "obg-range-disabled": _vm.disabled
                },
                style: {
                    width: _vm.rangeWidth + "px"
                }
            }, [ _c("div", {
                ref: "down",
                staticClass: "obg-range-button down",
                on: {
                    click: _vm.valueDown
                }
            }), _vm._v(" "), _c("obg-slider", {
                attrs: {
                    min: _vm.min,
                    max: _vm.max,
                    step: _vm.step,
                    barHeight: _vm.barHeight,
                    sliderWidth: _vm.sliderWidth,
                    focus: _vm.focus
                },
                on: {
                    input: _vm.onInput
                },
                model: {
                    value: _vm.model,
                    callback: function($$v) {
                        _vm.model = $$v;
                    }
                }
            }), _vm._v(" "), _c("div", {
                ref: "up",
                staticClass: "obg-range-button up",
                on: {
                    click: _vm.valueUp
                }
            }) ], 1);
        },
        staticRenderFns: []
    };
} ]);