/*!
 * obigo-js-ui v1.0.2 (https://)
 * Licensed under the GPL license
 */
module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: false
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.loaded = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.p = "";
    return __webpack_require__(0);
}([ function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(6);
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _popover = __webpack_require__(7);
    var _popover2 = _interopRequireDefault(_popover);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    exports.default = {
        name: "obg-combo-box",
        props: {
            disable: {
                type: Boolean,
                default: false
            },
            itemHeight: {
                type: Number,
                default: 61
            },
            focusZone: {
                type: Number,
                default: 1
            },
            value: {
                type: Number,
                default: -1
            },
            options: {
                type: Array,
                required: true,
                validator: function validator(arr) {
                    if (arr.length < 0 || arr.length > 5) {
                        return false;
                    }
                    arr.forEach(function(item) {
                        if (!(item.hasOwnProperty("name") && item.hasOwnProperty("label"))) {
                            throw new Error("options should be [{ name: xxxx, label: yyyy}, ...]");
                        }
                    });
                    return true;
                }
            }
        },
        data: function data() {
            return {
                selectedItemIndex: 0
            };
        },
        components: {
            "obg-popover": _popover2.default
        },
        computed: {
            contextMenuHeight: function contextMenuHeight() {
                return this.options.length * this.itemHeight + this.options.length - 3;
            },
            selectedItemLabel: function selectedItemLabel() {
                return this.options[this.selectedItemIndex].label;
            }
        },
        methods: {
            close: function close() {
                this.$refs.popover.close();
                this.$emit("close");
            },
            open: function open(event) {
                if (!this.disable) {
                    this.$refs.popover.open(event);
                    this.$emit("open");
                }
            },
            onOpen: function onOpen() {
                this.$emit("open");
            },
            onClose: function onClose() {
                this.$emit("close");
            },
            onItemClick: function onItemClick(e) {
                var name = e.currentTarget.getAttribute("name");
                this.selectedItemIndex = this.options.findIndex(function(item) {
                    return item.name === name;
                });
                this.close();
            }
        },
        watch: {
            selectedItemIndex: function selectedItemIndex(val) {
                this.$emit("input", val);
            },
            value: function value(val) {
                this.selectedItemIndex = val;
            }
        },
        mounted: function mounted() {
            this.target = this.$refs.popover.$el.parentNode;
            this.target.addEventListener("contextmenu", this.open);
            if (this.value >= 0) {
                this.selectedItemIndex = this.value;
            } else {
                this.selectedItemIndex = 0;
            }
        },
        beforeDestroy: function beforeDestroy() {
            this.target.removeEventListener("contexmenu", this.handler);
        }
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _popover = __webpack_require__(3);
    var validator = _interopRequireWildcard(_popover);
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                }
            }
            newObj.default = obj;
            return newObj;
        }
    }
    exports.default = {
        props: {
            anchor: {
                type: String,
                default: "bottom left",
                validator: validator.positionValidator
            },
            self: {
                type: String,
                default: "top left",
                validator: validator.positionValidator
            },
            maxHeight: String,
            touchPosition: Boolean,
            anchorClick: {
                type: Boolean,
                default: true
            },
            offset: {
                type: Array,
                validator: validator.offsetValidator
            },
            disable: Boolean
        },
        data: function data() {
            return {
                opened: false,
                progress: false
            };
        },
        computed: {
            transformCSS: function transformCSS() {
                return this.getTransformProperties({
                    selfOrigin: this.selfOrigin
                });
            },
            anchorOrigin: function anchorOrigin() {
                return this.parsePosition(this.anchor);
            },
            selfOrigin: function selfOrigin() {
                return this.parsePosition(this.self);
            }
        },
        mounted: function mounted() {
            var _this = this;
            if (this.$slots.default) {
                var slotLength = this.$slots.default.length;
                if (slotLength < 1 || slotLength > 5) console.error("popover need 1~5 slot");
            } else {
                console.error("popover need 1~5 slot");
            }
            this.$nextTick(function() {
                _this.anchorEl = _this.$el.parentNode;
                _this.anchorEl.removeChild(_this.$el);
                _this.anchorEl = _this.anchorEl.tagName === "BUTTON" ? _this.anchorEl : _this.anchorEl.parentNode;
                if (_this.anchorClick) {
                    _this.anchorEl.classList.add("cursor-pointer");
                    _this.anchorEl.addEventListener("click", _this.toggle);
                }
            });
        },
        beforeDestroy: function beforeDestroy() {
            if (this.anchorClick && this.anchorEl) {
                this.anchorEl.removeEventListener("click", this.toggle);
            }
            this.close();
        },
        methods: {
            toggle: function toggle(event) {
                if (this.opened) {
                    this.close();
                } else {
                    this.open(event);
                }
            },
            open: function open(event) {
                var _this2 = this;
                if (this.disable || this.opened) {
                    return;
                }
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                this.opened = true;
                document.body.click();
                document.body.appendChild(this.$el);
                document.addEventListener("click", this.close);
                this.$el.addEventListener("click", this.close);
                this.$nextTick(function() {
                    _this2.__updatePosition(event);
                    _this2.$emit("open");
                });
            },
            close: function close(fn) {
                var _this3 = this;
                if (!this.opened || this.progress) {
                    return;
                }
                document.removeEventListener("click", this.close);
                this.progress = true;
                setTimeout(function() {
                    _this3.opened = false;
                    _this3.progress = false;
                    document.body.removeChild(_this3.$el);
                    _this3.$emit("close");
                    if (typeof fn === "function") {
                        fn();
                    }
                }, 1);
            },
            __updatePosition: function __updatePosition(event) {
                this.setPosition({
                    event: event,
                    el: this.$el,
                    offset: this.offset,
                    anchorEl: this.anchorEl,
                    anchorOrigin: this.anchorOrigin,
                    selfOrigin: this.selfOrigin,
                    maxHeight: this.maxHeight,
                    anchorClick: this.anchorClick,
                    touchPosition: this.touchPosition
                });
            },
            parsePosition: function parsePosition(pos) {
                var parts = pos.split(" ");
                return {
                    vertical: parts[0],
                    horizontal: parts[1]
                };
            },
            getTransformProperties: function getTransformProperties(_ref) {
                var selfOrigin = _ref.selfOrigin;
                var vert = selfOrigin.vertical;
                var horiz = selfOrigin.horizontal === "middle" ? "center" : selfOrigin.horizontal;
                return {
                    "transform-origin": vert + " " + horiz + " 0px"
                };
            },
            setPosition: function setPosition(_ref2) {
                var el = _ref2.el, anchorEl = _ref2.anchorEl, anchorOrigin = _ref2.anchorOrigin, selfOrigin = _ref2.selfOrigin, maxHeight = _ref2.maxHeight, event = _ref2.event, anchorClick = _ref2.anchorClick, touchPosition = _ref2.touchPosition, offset = _ref2.offset;
                var anchor = void 0;
                if (event && (!anchorClick || touchPosition)) {
                    var _eventPosition = this.eventPosition(event), top = _eventPosition.top, left = _eventPosition.left;
                    anchor = {
                        top: top,
                        left: left,
                        width: 1,
                        height: 1,
                        right: left + 1,
                        center: top,
                        middle: left,
                        bottom: top + 1
                    };
                } else {
                    anchor = this.getAnchorPosition(anchorEl, offset);
                }
                var target = this.getTargetPosition(el);
                var targetPosition = {
                    top: anchor[anchorOrigin.vertical] - target[selfOrigin.vertical],
                    left: anchor[anchorOrigin.horizontal] - target[selfOrigin.horizontal]
                };
                el.style.top = Math.max(0, targetPosition.top) + "px";
                el.style.left = Math.max(0, targetPosition.left) + "px";
                el.style.maxHeight = this.maxHeight || window.innerHeight * .9 + "px";
            },
            eventPosition: function eventPosition(e) {
                var posx = void 0, posy = void 0;
                if (e.clientX || e.clientY) {
                    posx = e.clientX;
                    posy = e.clientY;
                } else if (e.pageX || e.pageY) {
                    posx = e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft;
                    posy = e.pageY - document.body.scrollTop - document.documentElement.scrollTop;
                }
                return {
                    top: posy,
                    left: posx
                };
            },
            getAnchorPosition: function getAnchorPosition(el, offset) {
                var _el$getBoundingClient = el.getBoundingClientRect(), top = _el$getBoundingClient.top, left = _el$getBoundingClient.left, right = _el$getBoundingClient.right, bottom = _el$getBoundingClient.bottom;
                var a = {
                    top: top,
                    left: left,
                    width: el.offsetWidth,
                    height: el.offsetHeight
                };
                if (offset) {
                    a.top += offset[1];
                    a.left += offset[0];
                    if (bottom) {
                        bottom += offset[1];
                    }
                    if (right) {
                        right += offset[0];
                    }
                }
                a.right = right || a.left + a.width;
                a.bottom = bottom || a.top + a.height;
                a.middle = a.left + (a.right - a.left) / 2;
                a.center = a.top + (a.bottom - a.top) / 2;
                return a;
            },
            getTargetPosition: function getTargetPosition(el) {
                return {
                    top: 0,
                    center: el.offsetHeight / 2,
                    bottom: el.offsetHeight,
                    left: 0,
                    middle: el.offsetWidth / 2,
                    right: el.offsetWidth
                };
            }
        }
    };
}, function(module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.positionValidator = positionValidator;
    exports.offsetValidator = offsetValidator;
    function positionValidator(pos) {
        var parts = pos.split(" ");
        if (parts.length !== 2) {
            return false;
        }
        if (![ "top", "center", "bottom" ].includes(parts[0])) {
            console.error("Anchor/Self position must start with one of top/center/bottom");
            return false;
        }
        if (![ "left", "middle", "right" ].includes(parts[1])) {
            console.error("Anchor/Self position must end with one of left/middle/right");
            return false;
        }
        return true;
    }
    function offsetValidator(val) {
        if (!val) {
            return true;
        }
        if (val.length !== 2) {
            return false;
        }
        if (typeof val[0] !== "number" || typeof val[1] !== "number") {
            return false;
        }
        return true;
    }
}, function(module, exports) {}, function(module, exports) {}, function(module, exports, __webpack_require__) {
    var __vue_exports__, __vue_options__;
    var __vue_styles__ = {};
    __webpack_require__(4);
    __vue_exports__ = __webpack_require__(1);
    var __vue_template__ = __webpack_require__(8);
    __vue_options__ = __vue_exports__ = __vue_exports__ || {};
    if (typeof __vue_exports__.default === "object" || typeof __vue_exports__.default === "function") {
        __vue_options__ = __vue_exports__ = __vue_exports__.default;
    }
    if (typeof __vue_options__ === "function") {
        __vue_options__ = __vue_options__.options;
    }
    __vue_options__.render = __vue_template__.render;
    __vue_options__.staticRenderFns = __vue_template__.staticRenderFns;
    __vue_options__._scopeId = "data-v-08045837";
    module.exports = __vue_exports__;
}, function(module, exports, __webpack_require__) {
    var __vue_exports__, __vue_options__;
    var __vue_styles__ = {};
    __webpack_require__(5);
    __vue_exports__ = __webpack_require__(2);
    var __vue_template__ = __webpack_require__(9);
    __vue_options__ = __vue_exports__ = __vue_exports__ || {};
    if (typeof __vue_exports__.default === "object" || typeof __vue_exports__.default === "function") {
        __vue_options__ = __vue_exports__ = __vue_exports__.default;
    }
    if (typeof __vue_options__ === "function") {
        __vue_options__ = __vue_options__.options;
    }
    __vue_options__.render = __vue_template__.render;
    __vue_options__.staticRenderFns = __vue_template__.staticRenderFns;
    __vue_options__._scopeId = "data-v-496199f2";
    module.exports = __vue_exports__;
}, function(module, exports) {
    module.exports = {
        render: function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("button", {
                ref: "origin",
                staticClass: "combo-box-button",
                attrs: {
                    disabled: _vm.disabled
                }
            }, [ _c("label", [ _vm._v(_vm._s(_vm.selectedItemLabel)) ]), _vm._v(" "), _c("div", {
                staticClass: "arrow"
            }), _vm._v(" "), _c("obg-popover", {
                ref: "popover",
                staticClass: "combo-box",
                style: {
                    height: _vm.contextMenuHeight + "px"
                },
                attrs: {
                    anchor: "bottom left",
                    self: "top left"
                },
                on: {
                    open: _vm.onOpen,
                    close: _vm.onClose
                }
            }, _vm._l(_vm.options, function(item, index) {
                return _c("div", {
                    directives: [ {
                        name: "obg-focus",
                        rawName: "v-obg-focus",
                        value: {
                            zone: _vm.focusZone,
                            order: index + 1
                        },
                        expression: "{zone: focusZone, order: index + 1}"
                    } ],
                    staticClass: "menu-item",
                    class: [ {
                        selected: _vm.selectedItemIndex === index
                    } ],
                    style: {
                        height: _vm.itemHeight + "px"
                    },
                    attrs: {
                        name: item.name
                    },
                    on: {
                        click: _vm.onItemClick
                    }
                }, [ _c("span", {
                    staticClass: "item-content",
                    style: {
                        lineHeight: _vm.itemHeight + "px"
                    }
                }, [ _vm._v("\n        " + _vm._s(item.label) + "\n      ") ]) ]);
            })) ], 1);
        },
        staticRenderFns: []
    };
}, function(module, exports) {
    module.exports = {
        render: function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", {
                staticClass: "obg-popover animate-scale",
                style: _vm.transformCSS,
                on: {
                    click: function($event) {
                        $event.stopPropagation();
                    }
                }
            }, [ _vm._t("default") ], 2);
        },
        staticRenderFns: []
    };
} ]);