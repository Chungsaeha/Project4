/*!
 * obigo-js-ui v1.0.2 (https://)
 * Licensed under the GPL license
 */
module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: false
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.loaded = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.p = "";
    return __webpack_require__(0);
}([ function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(4);
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _longPress = __webpack_require__(2);
    var _longPress2 = _interopRequireDefault(_longPress);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    exports.default = {
        name: "obg-numeric",
        components: {},
        props: {
            min: {
                type: Number,
                default: 0
            },
            max: {
                type: Number,
                default: 99
            },
            step: {
                type: Number,
                default: 1
            },
            disabled: {
                type: Boolean,
                default: false
            },
            value: {
                type: Number,
                default: 0
            },
            width: {
                type: Number,
                default: 150
            },
            height: {
                type: Number,
                default: 300
            },
            delimiter: {
                type: String,
                default: ":"
            },
            showDelimiter: {
                type: Boolean,
                default: true
            },
            placeValue: {
                type: Number,
                default: 2
            }
        },
        computed: {
            numberTop: function numberTop() {
                return -(this.numberHeight / 2);
            },
            delimiterTop: function delimiterTop() {
                return -(this.height / 2) + -(this.delimiterHeight / 2);
            },
            delimiterLeft: function delimiterLeft() {
                return this.width - this.delimiterWidth / 2;
            },
            padDigits: function padDigits() {
                return Array(Math.max(this.placeValue - String(this.digits).length + 1, 0)).join(0) + this.digits;
            }
        },
        watch: {
            value: function value(val) {
                if (val < this.min || val > this.max) return;
                this.digits = val;
            }
        },
        mounted: function mounted() {
            var _this = this;
            var up = this.$refs.up;
            var down = this.$refs.down;
            (0, _longPress2.default)(up, {
                counter: function counter() {
                    _this.valueUp();
                },
                end: function end() {
                    _this.onInput(_this.digits);
                }
            });
            (0, _longPress2.default)(down, {
                counter: function counter() {
                    _this.valueDown();
                },
                end: function end() {
                    _this.onInput(_this.digits);
                }
            });
            this.$on("jogclick", function() {
                _this.focus = !_this.focus;
                if (_this.focus) {} else {}
            });
            this.$on("focusout", function() {
                _this.focus = false;
            });
            this.$nextTick(function() {
                var elementOffset = _this.$el.getClientRects()[0];
                var numberOffset = _this.$refs.number.getClientRects()[0];
                _this.offsetTop = elementOffset.top;
                _this.offsetLeft = elementOffset.left;
                _this.numberHeight = numberOffset.height;
                if (_this.showDelimiter) {
                    var delimiterOffset = _this.$refs.delimiter.getClientRects()[0];
                    _this.delimiterHeight = delimiterOffset.height;
                    _this.delimiterWidth = delimiterOffset.width;
                    _this.$refs.delimiter.style.height = "0px";
                }
                _this.$refs.number.style.height = "0px";
            });
        },
        data: function data() {
            return {
                digits: this.value < this.min ? this.min : this.value,
                focus: false,
                offsetTop: 0,
                numberHeight: 0,
                delimiterOffsetTop: 0,
                delimiterWidth: 1,
                delimiterHeight: 1
            };
        },
        methods: {
            valueDown: function valueDown() {
                this.digits = this.digits - this.step;
                if (this.digits < this.min) this.digits = this.min;
                this.$emit("input", this.digits);
            },
            valueUp: function valueUp() {
                this.digits = this.digits + this.step;
                if (this.digits > this.max) this.digits = this.max;
                this.$emit("input", this.digits);
            },
            onInput: function onInput(val) {
                this.$emit("input", val);
            }
        }
    };
}, function(module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = function(element, options) {
        var holdRelease = function holdRelease(event) {
            document.removeEventListener("mouseup", holdRelease);
            document.onselectstart = null;
            reset();
            clearTimeout(timer);
            if (options.end) {
                options.end(event);
            }
        };
        var startCounter = function startCounter() {
            timer = setTimeout(function() {
                options.counter(++counter);
                if (counter % 3 === 0) {
                    duration = duration / 2 > minDuration ? duration / 2 : minDuration;
                }
                startCounter();
            }, duration);
        };
        var reset = function reset() {
            isHolding = false;
            duration = 1e3;
            counter = 0;
        };
        element.addEventListener("mousedown", function(event) {
            if (isHolding) return;
            event.preventDefault();
            document.onselectstart = function() {
                return false;
            };
            document.addEventListener("mouseup", holdRelease);
            timer = setTimeout(function() {
                isHolding = true;
                clearTimeout(timer);
                if (options.start) {
                    options.start(event);
                }
                if (options.counter) {
                    startCounter();
                }
            }, longPressDuration);
        });
    };
    var isHolding = false;
    var longPressDuration = 500;
    var timer = null;
    var duration = 500;
    var minDuration = 100;
    var counter = 0;
}, function(module, exports) {}, function(module, exports, __webpack_require__) {
    var __vue_exports__, __vue_options__;
    var __vue_styles__ = {};
    __webpack_require__(3);
    __vue_exports__ = __webpack_require__(1);
    var __vue_template__ = __webpack_require__(5);
    __vue_options__ = __vue_exports__ = __vue_exports__ || {};
    if (typeof __vue_exports__.default === "object" || typeof __vue_exports__.default === "function") {
        __vue_options__ = __vue_exports__ = __vue_exports__.default;
    }
    if (typeof __vue_options__ === "function") {
        __vue_options__ = __vue_options__.options;
    }
    __vue_options__.render = __vue_template__.render;
    __vue_options__.staticRenderFns = __vue_template__.staticRenderFns;
    __vue_options__._scopeId = "data-v-4e7e8d6f";
    module.exports = __vue_exports__;
}, function(module, exports) {
    module.exports = {
        render: function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", {
                staticClass: "obg-numeric",
                style: {
                    width: _vm.width + "px",
                    height: _vm.height + "px"
                },
                attrs: {
                    delimiter: _vm.delimiter
                }
            }, [ _c("button", {
                ref: "up",
                staticClass: "obg-numeric-button up",
                style: {
                    width: _vm.width + "px",
                    height: _vm.height / 2 + "px"
                },
                on: {
                    click: _vm.valueUp
                }
            }), _vm._v(" "), _c("div", {
                ref: "number",
                staticClass: "number",
                style: {
                    width: _vm.width + "px",
                    top: _vm.numberTop + "px"
                }
            }, [ _vm._v("\n    " + _vm._s(_vm.padDigits) + "\n    ") ]), _vm._v(" "), _c("button", {
                ref: "down",
                staticClass: "obg-numeric-button down",
                style: {
                    width: _vm.width + "px",
                    height: _vm.height / 2 + "px"
                },
                on: {
                    click: _vm.valueDown
                }
            }), _vm._v(" "), _c("div", {
                directives: [ {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.showDelimiter,
                    expression: "showDelimiter"
                } ],
                ref: "delimiter",
                staticClass: "delimiter",
                style: {
                    top: _vm.delimiterTop + "px",
                    left: _vm.delimiterLeft + "px"
                }
            }, [ _vm._v("\n    " + _vm._s(_vm.delimiter) + "\n    ") ]) ]);
        },
        staticRenderFns: []
    };
} ]);