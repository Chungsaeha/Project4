/*!
 * obigo-js-ui v1.0.2 (https://)
 * Licensed under the GPL license
 */
module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: false
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.loaded = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.p = "";
    return __webpack_require__(0);
}([ function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(4);
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _draggable = __webpack_require__(2);
    var _draggable2 = _interopRequireDefault(_draggable);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    exports.default = {
        name: "obg-slider",
        props: {
            min: {
                type: Number,
                default: 0
            },
            max: {
                type: Number,
                default: 100
            },
            step: {
                type: Number,
                default: 1
            },
            disabled: {
                type: Boolean,
                default: false
            },
            value: {
                type: Number
            },
            barHeight: {
                type: Number,
                default: 5
            },
            draggable: {
                type: Boolean,
                default: true
            },
            focus: {
                type: Boolean,
                defalut: false
            },
            sliderWidth: {
                type: Number,
                default: 525
            },
            thumbLabel: {
                type: Boolean,
                default: false
            }
        },
        computed: {
            progress: function progress() {
                var value = this.value;
                if (typeof value === "undefined" || value === null || value === 0) return 0;
                if (this.value >= this.max) {
                    return 100;
                } else if (this.value <= this.min) {
                    return 0;
                }
                return Math.floor((value - this.min) / (this.max - this.min) * 100);
            }
        },
        watch: {
            focus: function focus(isFocus) {
                if (isFocus) {
                    this.$refs.thumb.classList.add("focus");
                } else {
                    this.$refs.thumb.classList.remove("focus");
                }
            }
        },
        mounted: function mounted() {
            var _this = this;
            var thumb = this.$refs.thumb;
            var content = this.$refs.content;
            this.stepCount = Math.ceil((this.max - this.min) / this.step);
            var getThumbPosition = function getThumbPosition() {
                var contentBox = content.getBoundingClientRect();
                var thumbBox = thumb.getBoundingClientRect();
                return {
                    left: thumbBox.left - contentBox.left,
                    top: thumbBox.top - contentBox.top
                };
            };
            if (this.draggable) {
                var dragState = {};
                (0, _draggable2.default)(thumb, {
                    start: function start() {
                        if (_this.disabled) return;
                        var position = getThumbPosition();
                        dragState = {
                            thumbStartLeft: position.left,
                            thumbStartTop: position.top
                        };
                    },
                    drag: function drag(event) {
                        if (_this.disabled) return;
                        var contentBox = content.getBoundingClientRect();
                        var deltaX = event.pageX - contentBox.left - dragState.thumbStartLeft;
                        var newPosition = dragState.thumbStartLeft + deltaX - (dragState.thumbStartLeft + deltaX) % (contentBox.width / _this.stepCount);
                        var newProgress = newPosition / contentBox.width;
                        if (newProgress < 0) {
                            newProgress = 0;
                        } else if (newProgress > 1) {
                            newProgress = 1;
                        }
                        _this.$emit("input", Math.round(_this.min + newProgress * (_this.max - _this.min)));
                    },
                    end: function end() {
                        if (_this.disabled) return;
                        _this.$emit("input", _this.value);
                        dragState = {};
                    }
                });
            }
        },
        methods: {
            onClickBar: function onClickBar(event) {
                if (this.draggable) {
                    var contentBox = this.$refs.content.getBoundingClientRect();
                    var deltaX = event.pageX - contentBox.left;
                    var newProgress = Math.floor(this.max * deltaX / contentBox.width);
                    if (newProgress < this.min) {
                        newProgress = this.min;
                    } else if (newProgress > this.max) {
                        newProgress = this.max;
                    }
                    this.$emit("input", newProgress);
                }
            }
        }
    };
}, function(module, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = function(element, options) {
        var moveStart = function moveStart(event) {
            if (options.drag) {
                options.drag(event);
            }
        };
        var moveEnd = function moveEnd(event) {
            document.removeEventListener("mousemove", moveStart);
            document.removeEventListener("mouseup", moveEnd);
            document.onselectstart = null;
            document.ondragstart = null;
            isDragging = false;
            if (options.end) {
                options.end(event);
            }
        };
        element.addEventListener("mousedown", function(event) {
            if (isDragging) return;
            event.preventDefault();
            document.onselectstart = function() {
                return false;
            };
            document.ondragstart = function() {
                return false;
            };
            document.addEventListener("mousemove", moveStart);
            document.addEventListener("mouseup", moveEnd);
            isDragging = true;
            if (options.start) {
                options.start(event);
            }
        });
    };
    var isDragging = false;
}, function(module, exports) {}, function(module, exports, __webpack_require__) {
    var __vue_exports__, __vue_options__;
    var __vue_styles__ = {};
    __webpack_require__(3);
    __vue_exports__ = __webpack_require__(1);
    var __vue_template__ = __webpack_require__(5);
    __vue_options__ = __vue_exports__ = __vue_exports__ || {};
    if (typeof __vue_exports__.default === "object" || typeof __vue_exports__.default === "function") {
        __vue_options__ = __vue_exports__ = __vue_exports__.default;
    }
    if (typeof __vue_options__ === "function") {
        __vue_options__ = __vue_options__.options;
    }
    __vue_options__.render = __vue_template__.render;
    __vue_options__.staticRenderFns = __vue_template__.staticRenderFns;
    __vue_options__._scopeId = "data-v-9ff9d4ca";
    module.exports = __vue_exports__;
}, function(module, exports) {
    module.exports = {
        render: function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", {
                staticClass: "obg-slider",
                class: {
                    "obg-slider-disabled": _vm.disabled
                },
                style: {
                    width: _vm.sliderWidth + "px"
                }
            }, [ _vm._t("start"), _vm._v(" "), _c("div", {
                ref: "content",
                staticClass: "obg-slider-content",
                on: {
                    mousedown: function($event) {
                        $event.preventDefault();
                        _vm.onClickBar($event);
                    }
                }
            }, [ _c("div", {
                staticClass: "obg-slider-runway",
                style: {
                    "border-top-width": _vm.barHeight + "px"
                },
                on: {
                    click: _vm.onClickBar
                }
            }), _vm._v(" "), _c("div", {
                staticClass: "obg-slider-progress",
                style: {
                    width: _vm.progress + "%",
                    height: _vm.barHeight + "px"
                }
            }), _vm._v(" "), _c("div", {
                ref: "thumb",
                staticClass: "obg-slider-thumb animate-scale",
                style: {
                    left: _vm.progress + "%"
                }
            }, [ _vm.thumbLabel ? _c("span", {
                staticClass: "obg-slider-current-value"
            }, [ _vm._v(_vm._s(_vm.progress)) ]) : _vm._e() ]) ]), _vm._v(" "), _vm._t("end") ], 2);
        },
        staticRenderFns: []
    };
} ]);