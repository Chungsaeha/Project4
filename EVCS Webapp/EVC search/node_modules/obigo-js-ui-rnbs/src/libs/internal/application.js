/**
 * @module application
 * @desc application object has information and status of running web application.<br/>
 * this object can control app status and communicate with Obigo AF by events.
 * @example 
 * var appManager = window.applicationFramework.applicationManager
 * var application = appManager.getOwnerApplication(window.document)
 */

class application{

  /**
   * 
   * @event ApplicationKeypad
   * @summary input element has focus and notificate have to run virtual keypad 
   * @param {integer} type  - 0 : normal, 1: password
   * @param {string } init_string - initial text
   * @example
   * application.addEventListener("ApplicationKeypad", function(){
   *  //todo 
   * });
   *
   */


  /**
   * 
   * @event VirtualKeyboardState
   * @summary when use virtual keypad by application
   * @example
   * application.addEventListener("VirtualKeyboardState", function(){
   *  //todo 
   * });
   *
   */

  /**
   * 
   * @event ApplicationDestroyRequest
   * @summary when application is request destroy by external behavior
   * @example
   * application.addEventListener("ApplicationDestroyRequest", function(){
   *  //todo 
   * });
   *
   */


  /**
   * @event ApplicatinNotTopmost
   * @summary when application not shown in top layer
   * @example
   * application.addEventListener("ApplicatinNotTopmost", function(){
   *  //todo 
   * });
   *
   */

  /**
   * 
   * @event ApplicatinTopmost
   * @summary when application shown in top layer
   * @example
   * application.addEventListener("ApplicatinTopmost", function(){
   *  //todo 
   * });
   *
   */

  /**
   * 
   * @event ApplicatinNotPrimaryReceiver
   * @summary when application is removed in top of active application list
   * @example
   * application.addEventListener("ApplicatinNotPrimaryReceiver", function(){
   *  //todo 
   * });
   *
   */
  
  /**
   * @event ApplicatinPrimaryReceiver
   * @summary when application is located in top of active application list
   * @example
   * application.addEventListener("ApplicationPrimaryReceiver", function(){
   *  //todo 
   * });
   *
   */

  /**
   * @event ApplicationActivated
   * @summary when application has focus
   * @example
   * application.addEventListener("ApplicationActivated", function(){
   *  //todo 
   * });
   *
   */

  /**
   *
   * @event AplicationHidden
   * @summary when application hidden to screen
   * @example
   * application.addEventListener("ApplicationHidden", function(){
   *  //todo
   * });
   */

  /**
   *
   * @event AplicationShown
   * @summary when application shown to screen
   * @example
   * application.addEventListener("ApplicationShown", function(){
   *  //todo
   * });
   */

  /**
   *
   * @event ApplicationDeactivated
   * @summary when application lose focus
   * @example
   * application.addEventListener("ApplicationDeactivated", function(){
   *  //todo
   * });
   *
   */

  /**
   * 
   * @event ApplicationMessage
   * @summary register message listener to receive message from postMessage function
   * @param {string} message  - receive message
   * @param {string} origin   - target origin
   * @param {string} source   - message source
   * @example
   * application.addEventListener("ApplicationMessage", function(message, origin, source){
   *  //todo 
   * });
   *
   */


  /**
   * @function addEventListener
   * @summary add event to application.<br/>
   *
   * @param {string} evt          - event name
   * @param {function} callback   - callback function
   *
   */
  addEventListener (evt, callback) {
  }

  /**
   * @function removeEventListener
   * @summary remove event to application
   * @param {string} evt          - event name
   * @param {function} callback   - callback function
   *
   */
  removeEventListener (evt, callback) {
  }

  /**
   * @function home
   * @summary go to native home
   *
   */
  home () {
  }

  /**
   * @function main
   * @summary go to web launcher main
   *
   */
  main () {
  }

  /**
   * @function back
   * @summary go application back
   *
   */
  back () {
  }

  /**
   * @function show
   * @summary show application to screen. but does not change application layer order
   *
   */
  show () {
  }

  /**
   * @function show
   * @summary hide application to screen
   *
   */
  hide () {
  }

  /**
   * @function getDescriptor
   * @summary return widget descriptor object
   * @return {object}   - WidgetDescriptor
   *
   */
  getDescriptor () {
  }

  /**
   * @function destroyApplication
   * @summary destroy application and remove from application tree and deallocate resource. <br/>
   * if exist child application, destroy child application too. <br/>
   * window also removed.
   * @return {object}   - WidgetDescriptor
   *
   */
  destroyApplication () {
  }

  /**
   * @function inputKeypadText
   * @summary notification to application with input text when virtual keypad close 
   * @param {DOMString} input   - input element
   * @param {integer} source    - application id from 'onApplicationKeypad' event
   *
   */
  inputKeypadText (input, source) {
  }

  /**
   * @function inputKeypadAborted
   * @summary call when close virtual keypad without input text
   * @param {integer} source     - application id from 'onApplicationKeypad' event
   *
   */
  inputKeypadTextAborted (source) {
  }

  /**
   * @function enableKeypad
   * @summary set active/deactive virtual keypad<br/>
   * if false, does not show virtual keypad even focus on input element
   * @param {boolean} enable     - application id from 'onApplicationKeypad' event
   *
   */
  enableKeypad (enable) {
  }

  /**
   * @function showReminder
   * @summary show reminder popup<br/>
   * popup that support schdule of calender or events
   * @param {string} subject    - title of popup 
   * @param {string} date       - date
   * @param {string} descriptor - content of popup
   * @param {integer} timeout   - timeout time. millisecond. default 5000 millisecond
   *
   */
  showReminder (subject, date, time, descriptor, timeout) {
  }

  /**
   * @function unregisterHardKey
   * @summary unregister hardware key from application
   * @param {integer} keycode - hardware key code
   *
   */
  unregisterHardKey (keycode) {
  }

  /**
   * @function postMessage
   * @summary send message to other applications 
   * @param {string} message - hardware key code
   * @param {string} targetOrigin - hardware key code
   *
   */
  postMessage (message, targetOrigin) {
  }

  /**
   * @function registerMessageListener
   * @summary register targetOrigin to receive message from postMessage function
   * @param {string} targetOrigin - message origin name
   *
   */
  registerMessageListener(targetOrigin) {
  }

  /**
   * @function unregisterMessageListener
   * @summary unregister targetOrigin 
   * @param {string} targetOrigin - message origin name
   *
   */
  unregisterMessageListener(targetOrigin) {
  }

  // properties ////////////////////////////
  constructor(){
    /**
     * @member visiable
     * @type boolean
     * @summary application's visible/hidden status
     *
     */
    this.visible;

    /**
     * @member active
     * @type boolean
     * @summaryapplication active/deactive status
     *
     */
    this.active;


    /**
     * @member primiaryReceiver
     * @summary true if application received event earlier than other applications.
     * @type boolean
     *
     */
    this.primiaryReceiver;

    /**
     * @member type
     * @summary type of application. <br/>
     * gadget or fullscreen app. <br/>
     * if 1, fullscreen app mode. if 2, gedget mode
     * @type integer  
     *
     */
    this.type;

  }

}

