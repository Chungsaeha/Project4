/**
 * Created by krinjadl on 2017-03-24.
 */
import appManager from './appManager'
// import Keycodes from '../Hotkey/keycodes'
// import Hotkey from '../Hotkey/hotkey'

let instance
class Focus {
  constructor () {
    if (!instance) {
      console.log('[Focus] initial')
      instance = this
      this.appManager = appManager
      this.focusMap = new Map()
      this.currentZone = 1 // TODO 초기 zone은 어떻게 할 지 정책 확인
      this.currentOrder = 0
      // Hotkey.addHardkeyListner(Keycodes.WHEEL_EV, this._handleWheelEvent)
      this._initJogEventListner() // TODO hardkey module과 연동할지 여부  & jog click에 대한 처리 방안 & press/release인지 click인지
    }
    return instance
  }
  _initJogEventListner () {
    if (this.appManager) {
      this.appManager.addEventListener('CcpRotary', this._handleWheelEvent)
      this.appManager.addEventListener('CcpButtonPress', this._handleWheelClick)
    } else {
      window.addEventListener('mousewheel', evt => this._handleWheelEvent(evt))
      window.addEventListener('mousedown', evt => this._handleWheelClick(evt))
    }
  }
  _handleWheelEvent (evt) {
    let deltaY = evt.deltaY
    if (deltaY > 0) {
      console.log('down')
      this._prevComponent()
    } else {
      console.log('up')
      this._nextComponent()
    }
  }
  _getTarget () {
    return (this.focusMap.get(this.currentZone)) ? this.focusMap.get(this.currentZone).get(this.currentOrder) : null
  }
  _handleWheelClick (evt) {
    if (evt.button === 1) { // TODO up/down key값 확인 필요
      this._ZoneUp() // TODO top bottom push 에 따라 움직여야함
      const target = this._getTarget()
      if (target) {
        if (target.vnode.componentInstance) target.vnode.componentInstance.$emit('jogclick')
      }
      console.log('[wheel click]')
    }
  }
  _getZoneMap (zoneIndex) {
    let zoneMap = this.focusMap.get(zoneIndex)
    if (zoneMap) {
      return zoneMap
    } else {
      zoneMap = new Map()
      this.focusMap.set(zoneIndex, zoneMap)
      this.focusMap = new Map([...this.focusMap.entries()].sort())
      return zoneMap
    }
  }
  _ZoneUp () { // TODO up/down 고려 필요
    if (this.focusMap.get(this.currentZone + 1)) {  // TODO order나 zone이 순서대로가 아닌 경우
      this.removeFocus()
      this.currentZone += 1
      this.currentOrder = 0
    }
  }
  _prevComponent () {
    let zoneMap = this._getZoneMap(this.currentZone)
    for (let i = 1; i < zoneMap.size; i++) {
      if (this._isTargetAvailable(zoneMap, this.currentOrder - i)) {
        this.removeFocus()
        this.currentOrder -= i
        this.setFocus(this.currentOrder)
        return null
      }
    }
    this.removeFocus()
    this.currentOrder = zoneMap.size - 1
    this.setFocus(this.currentOrder)
  }
  _nextComponent () {
    let zoneMap = this._getZoneMap(this.currentZone)
    for (let i = 1; i < zoneMap.size; i++) {
      if (this._isTargetAvailable(zoneMap, this.currentOrder + i)) {
        if (this.currentOrder !== 0) this.removeFocus()
        this.currentOrder += i
        this.setFocus(this.currentOrder)
        return null
      }
    }
    this.removeFocus()
    this.currentOrder = 1
    this.setFocus(this.currentOrder)
  }
  _isTargetAvailable (zoneMap, index) {
    let targetComponent = zoneMap.get(index)
    if (targetComponent) {
      let $target = targetComponent.el
      if (!($target.disabled || $target.classList.contains('disabled') || $target.classList.contains('disable'))) return true
    }
    return false
  }
  _isTargetDisabled () {
    let $target = this._getTarget().el
    return $target.disabled || $target.classList.contains('disable')
  }
  setFocus (order) {
    let target = this._getTarget()
    if (target) {
      target.el.classList.add('obg-focus')
      if (target.vnode.componentInstance) {
        target.vnode.componentInstance.$emit('focusin')
      }
    }
  }
  removeFocus () {
    let target = this._getTarget()
    if (target) {
      target.el.classList.remove('obg-focus')
      if (target.vnode.componentInstance) {
        target.vnode.componentInstance.$emit('focusout')
      }
    }
  }
  addComponent (el, {zone, order}, vnode) {
    let zoneMap = this._getZoneMap(zone)
    if (zoneMap.get(order)) {
      // console.log('[focus order is duplicated]')
    } else {
      zoneMap.set(order, {el: el, vnode: vnode})
      this.focusMap.set(zone, new Map([...zoneMap.entries()].sort()))
    }
  }
  removeComponent ({zone, order}) { // TODO focus 된 component가 unmounted되거나 page 전환 될 때 처리방법 검토
    this.focusMap.get(zone).delete(order)
    this.currentOrder = 1
    this.currentZone = 1
  }
  setZone (index) {
    if (this.focusMap.get(index)) {
      this.currentZone = index
    } else {
      console.log('no such zone')
    }
  }
}

export default new Focus()
